# MusicClapplay.cpp

## Overview

`MusicClapplay.cpp` is an Arduino sketch that integrates:

* **DFRobot DF1201S** music module (DFPlayer) for audio playback
* **BMI270** accelerometer for clap detection
* **SD card** with `BeatMap` for dynamic beatmap loading
* **RGB LED feedback** on pins 8 (red), 9 (green), and 10 (blue)
* **Pushbuttons** on pins 2 (Restart), 3 (Play/Pause), and 4 (Skip)

The sketch loads a beatmap from a CSV on the SD card, plays songs, detects claps relative to the beat pattern, scores the user, and provides visual LED feedback:

* **Green LED** on an on‑beat clap
* **Blue LED** on an off‑beat clap
* **Red LED** for missed beats

---

# ble\_sd\_clap.cpp

## Overview

`ble_sd_clap.cpp` extends `MusicClapplay.cpp` by adding BLE server functionality using the **ArduinoBLE** library and incorporating beatmap support via the SD library. It streams live song metadata, playback progress, and scoring to a macOS GUI.

Key features:

* **SD Card Initialization** using `<SD.h>`—prints an error to Serial on failure
* **BeatMap** loading from CSV files for song metadata, BPM, time signature, and beat patterns
* **BLEService** and four **BLECharacteristic** objects for song name, score, current time, and total duration
* BLE **connect/disconnect** event handlers via `BLE.setEventHandler`
* Pattern buffer implemented using `std::array<int,4>` for fixed-size beat patterns

---

# BLE\_clap.ino

## Overview

`BLE_clap.ino` is a minimal Arduino sketch demonstrating BLE notifications paired with clap detection and basic LED feedback:

* Configures **ArduinoBLE** to advertise a custom service UUID
* Defines a characteristic for clap events
* Detects a simple clap via the accelerometer
* Sends a BLE notification when a clap is detected

This file illustrates the bare essentials to get BLE notifications on a clap event but does not include full beatmap, SD card, or scoring logic.

---

# beat\_scan.py

## Overview

`beat_scan.py` is a Python utility for processing recorded accelerometer logs and analyzing them against expected beat intervals. It can:

* Parse CSV or raw data files containing timestamped accelerometer readings
* Use provided BPM and time signature to compute expected beat times
* Compare detected acceleration peaks (claps) to beat times and output timing accuracy statistics

### Usage

```bash
python beat_scan.py --input data.csv --bpm 80 --time-signature 4
```

Outputs:

* Hit/miss counts
* Timing offsets histogram

---

# BeatMap.cpp / BeatMap.h

## Overview

`BeatMap` is a C++ class responsible for:

* Loading song metadata (name, BPM, time signature) from CSV files on the SD card
* Providing sequential beat patterns to Arduino sketches
* Serving song name and total duration metadata

The public API includes:

```cpp
static BeatMap loadFromCSV(const String &filename);
int getBpm() const;
int getTimeSignature() const;
String getSongName() const;
std::array<int,4> nextLine(unsigned long currentTime) const;
```

This class abstracts all file I/O and parsing, making beatmap data available for real-time in-sketch usage.
